---
interface Props {
  product?: {
    id: string;
    name: string;
    description: string;
    price: number;
    image: string;
    category: string;
    discount?: number;
  };
  onClose?: () => void;
}

const { product } = Astro.props;

// Only destructure product properties if product exists
const { name, description, price, image, category, discount } = product || {};

const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('es-PE', {
    style: 'currency',
    currency: 'PEN',
    minimumFractionDigits: 2,
  }).format(price);
};

// Only calculate finalPrice if price exists
const finalPrice = price ? (discount ? price * (1 - discount / 100) : price) : 0;
---

{product && (
  <div class="modal-overlay" onclick="document.querySelector('.modal-content').style.display='none'">
    <div class="modal-content" onclick="event.stopPropagation()">
      <button class="close-btn" onclick="this.closest('.modal-overlay').style.display='none'" aria-label="Cerrar modal">
        &times;
      </button>
      
      <div class="modal-body">
        <div class="modal-image">
          <img 
            src={image} 
            alt={name}
            loading="lazy"
            onerror="this.src='/images/placeholder.jpg'"
          />
        </div>
        
        <div class="modal-details">
          <span class="category-badge">{category}</span>
          <h2>{name}</h2>
          <p class="description">{description}</p>
          
          {price && (
            <div class="price-container">
              <span class="current-price">{formatPrice(finalPrice)}</span>
              {discount && price && (
                <span class="original-price">{formatPrice(price)}</span>
              )}
              {discount && (
                <span class="discount-badge">-{discount}%</span>
              )}
            </div>
          )}
          
          <div class="modal-actions">
            <button class="btn primary">
              <i class="fas fa-shopping-cart"></i> AÃ±adir al carrito
            </button>
            <a href={`/producto/${product.id}`} class="btn secondary">
              Ver detalles completos
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 1rem;
  }
  
  .modal-content {
    background: white;
    border-radius: 8px;
    width: 100%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }
  
  .close-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    z-index: 10;
  }
  
  .modal-body {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    padding: 2rem;
  }
  
  .modal-image {
    position: relative;
    padding-top: 100%;
    overflow: hidden;
    border-radius: 8px;
    background: #f5f5f5;
  }
  
  .modal-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    padding: 1rem;
  }
  
  .modal-details {
    display: flex;
    flex-direction: column;
  }
  
  .category-badge {
    display: inline-block;
    background: #f0f0f0;
    color: #666;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    margin-bottom: 1rem;
    align-self: flex-start;
  }
  
  h2 {
    margin: 0 0 1rem 0;
    color: #333;
  }
  
  .description {
    color: #666;
    line-height: 1.6;
    margin-bottom: 2rem;
  }
  
  .price-container {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .current-price {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2f3542;
  }
  
  .original-price {
    text-decoration: line-through;
    color: #999;
  }
  
  .discount-badge {
    background: #ff4757;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
  }
  
  .modal-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-top: auto;
  }
  
  .btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    text-align: center;
    text-decoration: none;
    transition: all 0.2s ease;
  }
  
  .btn.primary {
    background-color: #2f3542;
    color: white;
    border: none;
  }
  
  .btn.primary:hover {
    background-color: #1e90ff;
  }
  
  .btn.secondary {
    background: none;
    color: #2f3542;
    border: 1px solid #ddd;
  }
  
  .btn.secondary:hover {
    border-color: #2f3542;
  }
  
  @media (max-width: 768px) {
    .modal-body {
      grid-template-columns: 1fr;
      padding: 1rem;
    }
    
    .modal-image {
      margin-top: 2rem;
    }
  }
</style>

<script>
  // Cerrar el modal al presionar la tecla Escape
  if (typeof document !== 'undefined') {
    const handleEscape = (event) => {
      if (event.key === 'Escape') {
        const modal = document.querySelector('.modal-overlay');
        if (modal) {
          modal.style.display = 'none';
        }
      }
    };

    window.updateProductModal = (product) => {
      const modal = document.querySelector('.modal-overlay');
      if (!modal) return;

      // Actualizar contenido del modal con los datos del producto
      const nameEl = modal.querySelector('h2');
      const descriptionEl = modal.querySelector('.description');
      const priceEl = modal.querySelector('.current-price');
      const originalPriceEl = modal.querySelector('.original-price');
      const discountBadge = modal.querySelector('.discount-badge');
      const imageEl = modal.querySelector('.modal-image img');
      const categoryEl = modal.querySelector('.category-badge');

      if (nameEl) nameEl.textContent = product.name || '';
      if (descriptionEl) descriptionEl.textContent = product.description || '';
      if (priceEl) priceEl.textContent = new Intl.NumberFormat('es-PE', { style: 'currency', currency: 'PEN' }).format(product.price * (1 - (product.discount || 0) / 100));
      if (originalPriceEl) {
        if (product.discount && product.discount > 0) {
          originalPriceEl.textContent = new Intl.NumberFormat('es-PE', { style: 'currency', currency: 'PEN' }).format(product.price);
          originalPriceEl.style.display = 'inline';
        } else {
          originalPriceEl.style.display = 'none';
        }
      }
      if (discountBadge) {
        if (product.discount && product.discount > 0) {
          discountBadge.textContent = `-${product.discount}%`;
          discountBadge.style.display = 'inline-block';
        } else {
          discountBadge.style.display = 'none';
        }
      }
      if (imageEl) {
        imageEl.src = product.image || '/images/placeholder.jpg';
        imageEl.alt = product.name || '';
      }
      if (categoryEl) categoryEl.textContent = product.category || '';

      modal.style.display = 'flex';
    };

    document.addEventListener('keydown', handleEscape);

    // Limpiar el event listener cuando el componente se desmonte
    document.addEventListener('astro:after-swap', () => {
      document.removeEventListener('keydown', handleEscape);
      window.updateProductModal = undefined;
    });
  }
</script>
