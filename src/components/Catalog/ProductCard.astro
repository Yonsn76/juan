---
import type { Product } from '../../types/catalog';
import { supabase } from '../../lib/supabase';

interface Props {
  product: Product;
  categoryName: string;
}

const { product, categoryName } = Astro.props;
const { id, name, description, price, image, discount, categories } = product;

/**
 * Formatea un número como moneda en soles peruanos (PEN)
 */
const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('es-PE', {
    style: 'currency',
    currency: 'PEN',
    minimumFractionDigits: 2,
  }).format(price);
};

// Asegurarse de que el precio sea un número
const productPrice = typeof price === 'number' ? price : 0;
const productDiscount = typeof discount === 'number' ? discount : 0;
const finalPrice = productDiscount > 0 
  ? productPrice * (1 - productDiscount / 100) 
  : productPrice;

// Usar la imagen directamente ya que ya viene formateada desde el componente padre
const imageUrl = image || '/images/placeholder-product.jpg';
---

<article class="product-card">
  {/* Badge de descuento */}
  {discount && discount > 0 && (
    <div class="discount-badge">-{discount}%</div>
  )}

  {/* Contenedor de imagen */}
  <div class="product-image-container">
    <img
      src={imageUrl}
      alt={name}
      class="product-image"
      loading="lazy"
      onerror="this.src='/images/placeholder-product.jpg'"
    />
    
    {/* Botón de favoritos */}
    <button
      class="favorite-btn"
      aria-label={`Añadir ${name} a favoritos`}
      data-product-id={id}
    >
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24" 
        fill="none" 
        stroke="currentColor" 
        stroke-width="2"
        class="w-5 h-5"
      >
        <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
      </svg>
    </button>
  </div>

  {/* Contenido de la tarjeta */}
  <div class="product-info">
    <span class="category">{categories?.name || categoryName || 'Sin categoría'}</span>
    <h3 class="product-name">{name}</h3>
    
    {/* Precios */}
    <div class="price-container">
      <span class="current-price">{formatPrice(finalPrice)}</span>
      {discount && discount > 0 && (
        <span class="original-price">{formatPrice(price)}</span>
      )}
    </div>

    {/* Acciones */}
    <div class="actions">
      <button
        class="view-details details-btn"
        aria-label={`Ver detalles de ${name}`}
        data-product={JSON.stringify(product)}
      >
        <i class="fas fa-eye" aria-hidden="true"></i> Ver detalles
      </button>
      <button
        class="add-to-cart-button"
        aria-label={`Añadir ${name} al carrito`}
        onclick={() => {
          const event = new CustomEvent('addToCart', {
            detail: {
              id,
              name,
              price: typeof price === 'number' ? price : 0,
              quantity: 1,
              image: imageUrl,
            },
          });
          window.dispatchEvent(event);
        }}
      >
        <i class="fas fa-shopping-cart"></i> Añadir al carrito
      </button>
    </div>
  </div>
</article>

<style>
  /* Estilos profesionales para la tarjeta de producto */
  .product-card {
    position: relative;
    border-radius: var(--border-radius-lg);
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.04);
    overflow: hidden;
    transition: var(--transition-colors), var(--transition-transform);
    background: var(--color-white);
    height: 100%;
    display: flex;
    flex-direction: column;
    border: 1px solid var(--color-gray-100);
    will-change: transform, box-shadow;
  }

  .product-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06), 0 2px 8px rgba(0, 0, 0, 0.03);
    border-color: var(--color-gray-200);
  }

  .product-image-container {
    position: relative;
    padding-top: 100%; /* Relación de aspecto 1:1 */
    overflow: hidden;
    background-color: var(--color-gray-50);
  }

  .product-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    object-position: center;
    transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    background-color: var(--color-white);
    padding: 1.5rem;
  }

  .product-card:hover .product-image {
    transform: scale(1.03);
  }

  .discount-badge {
    position: absolute;
    top: 0.75rem;
    left: 0.75rem;
    background: var(--color-error);
    color: var(--color-white);
    padding: 0.25rem 0.625rem;
    border-radius: 9999px;
    font-size: 0.6875rem;
    font-weight: 600;
    letter-spacing: 0.01em;
    z-index: 2;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    line-height: 1;
  }

  .favorite-btn {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    background: rgba(255, 255, 255, 0.92);
    backdrop-filter: blur(4px);
    border: 1px solid var(--color-gray-200);
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: var(--transition-colors), var(--transition-transform);
    z-index: 2;
    color: var(--color-gray-600);
  }

  .favorite-btn:hover {
    background: var(--color-error);
    color: var(--color-white);
    border-color: var(--color-error);
    transform: scale(1.1);
  }

  .favorite-btn svg {
    width: 1rem;
    height: 1rem;
    transition: fill 0.2s ease;
  }

  .product-info {
    padding: 1.25rem;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    border-top: 1px solid var(--color-gray-100);
  }

  .category {
    font-size: 0.6875rem;
    color: var(--color-gray-500);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.5rem;
    font-weight: 500;
    line-height: 1.2;
  }

  .product-name {
    font-size: 0.9375rem;
    font-weight: 500;
    margin: 0 0 0.5rem;
    color: var(--color-gray-900);
    line-height: 1.4;
    letter-spacing: -0.01em;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    min-height: 44px;
  }

  .price-container {
    margin: 0.5rem 0 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .current-price {
    font-size: 1.0625rem;
    font-weight: 600;
    color: var(--color-gray-900);
    letter-spacing: -0.01em;
  }

  .original-price {
    font-size: 0.8125rem;
    color: var(--color-gray-400);
    text-decoration: line-through;
    font-weight: 500;
  }

  .actions {
    margin-top: auto;
    display: flex;
    gap: 0.5rem;
  }

  .view-details {
    flex: 1;
    background-color: var(--color-white);
    color: var(--color-primary-700);
    border: 1px solid var(--color-primary-200);
    border-radius: var(--border-radius-md);
    padding: 0.5rem 1rem;
    font-size: 0.8125rem;
    font-weight: 500;
    cursor: pointer;
    transition: var(--transition-colors);
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.375rem;
    line-height: 1.25;
    text-align: center;
    white-space: nowrap;
  }

  .view-details:hover {
    background-color: var(--color-primary-50);
    border-color: var(--color-primary-300);
    color: var(--color-primary-800);
  }

  .view-details i {
    font-size: 0.75rem;
    transition: transform 0.2s ease;
  }

  .view-details:hover i {
    transform: translateX(2px);
  }
</style>

<script>
  // Extender la interfaz Window para incluir updateProductModal
  declare global {
    interface Window {
      updateProductModal?: (product: any) => void;
    }
  }

  /**
   * Maneja los eventos de clic en la tarjeta de producto
   */
  function handleCardClick(event: Event) {
    const target = event.target as HTMLElement | null;
    if (!target) return;

    // Manejar clic en botón de favoritos
    const favBtn = target.closest('.favorite-btn') as HTMLButtonElement | null;
    if (favBtn) {
      event.preventDefault();
      favBtn.classList.toggle('active');
      const productId = favBtn.getAttribute('data-product-id');
      // Aquí puedes agregar la lógica para guardar en favoritos
      console.log('Producto favorito:', productId);
      return;
    }


    // Manejar clic en botón de detalles
    const detailsBtn = target.closest('.details-btn') as HTMLButtonElement | null;
    if (detailsBtn) {
      event.preventDefault();
      const productData = detailsBtn.getAttribute('data-product');
      console.log('Clic en Ver detalles, productData:', productData);
      if (productData) {
        try {
          const product = JSON.parse(productData);
          console.log('Producto parseado:', product);
          // Usar la función global para abrir el modal de detalles
          if (typeof window.updateProductModal === 'function') {
            window.updateProductModal(product);
          } else {
            console.warn('window.updateProductModal no está definido');
          }
        } catch (error) {
          console.error('Error al procesar los detalles del producto:', error);
        }
      } else {
        console.log('No hay datos de producto, intentando abrir modal sin datos');
        if (typeof window.updateProductModal === 'function') {
          window.updateProductModal({});
        } else {
          console.warn('window.updateProductModal no está definido');
        }
      }
    }
  }

  // Agregar el event listener cuando el componente se monte
  document.addEventListener('astro:page-load', () => {
    document.addEventListener('click', handleCardClick);
  });

  // Limpiar el event listener cuando el componente se desmonte
  document.addEventListener('astro:after-swap', () => {
    document.removeEventListener('click', handleCardClick);
  });
</script>
