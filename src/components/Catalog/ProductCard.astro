---
import type { Product } from '../../types/catalog';
import { supabase } from '../../lib/supabase';

interface Props {
  product: Product;
  categoryName: string;
}

const { product, categoryName } = Astro.props;
const { id, name, price, image, discount, categories } = product;
// Asegurarse de que se use la descripción correcta
const description = product.description && product.description !== name ? product.description : '';

/**
 * Formatea un número como moneda en soles peruanos (PEN)
 */
const formatPrice = (price: number): string => {
  return new Intl.NumberFormat('es-PE', {
    style: 'currency',
    currency: 'PEN',
    minimumFractionDigits: 2,
  }).format(price);
};

// Asegurarse de que el precio sea un número
const productPrice = typeof price === 'number' ? price : 0;
const productDiscount = typeof discount === 'number' ? discount : 0;
const finalPrice = productDiscount > 0 
  ? productPrice * (1 - productDiscount / 100) 
  : productPrice;

// Usar la imagen directamente ya que ya viene formateada desde el componente padre
const imageUrl = image || '/images/placeholder-product.jpg';
---

<div class="card">
  {discount && discount > 0 && (
    <div class="discount-badge">-{discount}%</div>
  )}

  <div class="card-img">
    <div class="img">
      <img
        src={imageUrl}
        alt={name}
        loading="lazy"
        onerror="this.src='/images/placeholder-product.jpg'"
        style="width: 100%; height: 100%; object-fit: contain; border-radius: 5px 5px 0 0;"
      />
    </div>
  </div>

  <div class="card-title">{name}</div>
  <hr class="card-divider" />

  <div class="card-description">
    {description}
  </div>
  <div class="card-footer">
    <div class="card-price">
      <span>S/</span> {finalPrice.toFixed(2)}
    </div>
    <div class="button-group">
      <button class="card-btn" aria-label={`Añadir ${name} al carrito`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <path d="m397.78 316h-205.13a15 15 0 0 1 -14.65-11.67l-34.54-150.48a15 15 0 0 1 14.62-18.36h274.27a15 15 0 0 1 14.65 18.36l-34.6 150.48a15 15 0 0 1 -14.62 11.67zm-193.19-30h181.25l27.67-120.48h-236.6z"></path><path d="m222 450a57.48 57.48 0 1 1 57.48-57.48 57.54 57.54 0 0 1 -57.48 57.48zm0-84.95a27.48 27.48 0 1 0 27.48 27.47a27.5 27.5 0 0 0 -27.48-27.47z"></path><path d="m368.42 450a57.48 57.48 0 1 1 57.48-57.48 57.54 57.54 0 0 1 -57.48 57.48zm0-84.95a27.48 27.48 0 1 0 27.48 27.47a27.5 27.5 0 0 0 -27.48-27.47z"></path><path d="m158.08 165.49a15 15 0 0 1 -14.23-10.26l-25.71-77.23h-47.44a15 15 0 1 1 0-30h58.3a15 15 0 0 1 14.23 10.26l29.13 87.49a15 15 0 0 1 -14.23 19.74z"></path>
        </svg>
      </button>
      <button class="ver-detalles-btn" aria-label={`Ver detalles de ${name}`} onclick={`showProductModal('${id}')`}>
        Ver detalles
      </button>
    </div>
  </div>
</div>

<!-- Modal del producto -->
<div id="productModal-{id}" class="product-modal-overlay" style="display: none;">
  <div class="product-modal-content">
    <button class="close-modal-btn" onclick={`closeProductModal('${id}')`}>&times;</button>
    
    <div class="product-modal-body">
      <div class="product-modal-image">
        <img 
          src={imageUrl} 
          alt={name}
          loading="lazy"
          onerror="this.src='/images/placeholder-product.jpg'"
        />
      </div>
      
      <div class="product-modal-details">
        <h2>{name}</h2>
        <p class="product-description">{description}</p>
        
        {product.details && (
          <div class="product-details">
            <h3>Detalles del producto</h3>
            <p>{product.details}</p>
          </div>
        )}
        
        <div class="product-price-container">
          {discount && discount > 0 ? (
            <>
              <span class="product-current-price"><span>S/</span> {finalPrice.toFixed(2)}</span>
              <span class="product-original-price"><span>S/</span> {productPrice.toFixed(2)}</span>
              <span class="product-discount-badge">-{discount}%</span>
            </>
          ) : (
            <span class="product-current-price"><span>S/</span> {finalPrice.toFixed(2)}</span>
          )}
        </div>
        
        {product.stock !== undefined && (
          <div class="product-stock">
            <span>Stock disponible: {product.stock}</span>
          </div>
        )}
        
        <div class="product-modal-actions">
          <button class="add-to-cart-btn">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="24" height="24">
              <path d="m397.78 316h-205.13a15 15 0 0 1 -14.65-11.67l-34.54-150.48a15 15 0 0 1 14.62-18.36h274.27a15 15 0 0 1 14.65 18.36l-34.6 150.48a15 15 0 0 1 -14.62 11.67zm-193.19-30h181.25l27.67-120.48h-236.6z"></path><path d="m222 450a57.48 57.48 0 1 1 57.48-57.48 57.54 57.54 0 0 1 -57.48 57.48zm0-84.95a27.48 27.48 0 1 0 27.48 27.47a27.5 27.5 0 0 0 -27.48-27.47z"></path><path d="m368.42 450a57.48 57.48 0 1 1 57.48-57.48 57.54 57.54 0 0 1 -57.48 57.48zm0-84.95a27.48 27.48 0 1 0 27.48 27.47a27.5 27.5 0 0 0 -27.48-27.47z"></path><path d="m158.08 165.49a15 15 0 0 1 -14.23-10.26l-25.71-77.23h-47.44a15 15 0 1 1 0-30h58.3a15 15 0 0 1 14.23 10.26l29.13 87.49a15 15 0 0 1 -14.23 19.74z"></path>
            </svg> Añadir al carrito
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ id }}>
  // Esta función se define en el cliente
  window.showProductModal = (productId) => {
    const modalElement = document.getElementById(`productModal-${productId}`);
    if (modalElement) {
      modalElement.style.display = 'flex';
      // Prevenir scroll del body cuando el modal está abierto
      document.body.style.overflow = 'hidden';
    }
  };

  window.closeProductModal = (productId) => {
    const modalElement = document.getElementById(`productModal-${productId}`);
    if (modalElement) {
      modalElement.style.display = 'none';
      // Restaurar scroll del body
      document.body.style.overflow = 'auto';
    }
  };

  // Cerrar modal al hacer clic fuera del contenido
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(`productModal-${id}`);
    if (modal) {
      modal.addEventListener('click', (event) => {
        if (event.target === modal) {
          closeProductModal(id);
        }
      });
      
      // Cerrar al presionar Escape
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape' && modal.style.display === 'flex') {
          closeProductModal(id);
        }
      });
    }
  });
</script>

<style scoped>
  .card {
    --font-color: #323232;
    --font-color-sub: #666;
    --bg-color: #fff;
    --main-color: #ff0000;
    --main-focus: #000000;
    width: 230px;
    min-height: 350px;
    background: var(--bg-color);
    border: 2px solid var(--main-color);
    box-shadow: 4px 4px var(--main-color);
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    padding: 20px;
    gap: 10px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  }

  .card:last-child {
    justify-content: flex-end;
  }

  .card-img {
    transition: all 0.5s;
    display: flex;
    justify-content: center;
  }

  .card-img .img {
    transform: scale(1);
    position: relative;
    box-sizing: border-box;
    width: 150px;
    height: 150px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .card-title {
    font-size: 20px;
    font-weight: 500;
    text-align: center;
    color: var(--font-color);
  }

  .card-subtitle {
    font-size: 14px;
    font-weight: 400;
    color: var(--font-color-sub);
  }

  .card-divider {
    width: 100%;
    border: 1px solid var(--main-color);
    border-radius: 50px;
  }

  .card-description {
    font-size: 14px;
    font-weight: 400;
    color: #0066cc; /* Color azul para la descripción */
    margin-top: 10px;
    margin-bottom: 10px;
    flex-grow: 1;
    min-height: 60px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
  }

  .card-footer {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .card-price {
    font-size: 20px;
    font-weight: 500;
    color: var(--font-color);
  }

  .card-price span {
    font-size: 20px;
    font-weight: 500;
    color: var(--font-color-sub);
  }

  .button-group {
    display: flex;
    gap: 10px;
    width: 100%;
  }

  .card-btn {
    height: 35px;
    background: var(--bg-color);
    border: 2px solid var(--main-color);
    border-radius: 5px;
    padding: 0 15px;
    transition: all 0.3s;
    cursor: pointer;
  }
  
  .ver-detalles-btn {
    height: 35px;
    background-color: var(--main-focus);
    color: white;
    border: 2px solid var(--main-color);
    border-radius: 5px;
    padding: 0 15px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s;
    white-space: nowrap;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-grow: 1;
  }
  
  .ver-detalles-btn:hover {
    background-color: var(--main-color);
    transform: translateY(-2px);
    box-shadow: 2px 2px var(--main-focus);
  }
  
  /* Estilos para el modal */
  .product-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.7);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    padding: 1rem;
  }
  
  .product-modal-content {
    background: white;
    border-radius: 8px;
    width: 100%;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  }
  
  .close-modal-btn {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: #666;
    z-index: 10;
  }
  
  .product-modal-body {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    padding: 2rem;
  }
  
  .product-modal-image {
    position: relative;
    padding-top: 100%;
    overflow: hidden;
    border-radius: 8px;
    background: #f5f5f5;
  }
  
  .product-modal-image img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: contain;
    padding: 1rem;
  }
  
  .product-modal-details {
    display: flex;
    flex-direction: column;
  }
  
  .product-modal-details h2 {
    margin: 0 0 1rem 0;
    color: #333;
  }
  
  .product-description {
    color: #666;
    line-height: 1.6;
    margin-bottom: 1rem;
  }
  
  .product-details {
    margin-bottom: 1.5rem;
    padding: 1rem;
    background-color: #f9f9f9;
    border-radius: 8px;
  }
  
  .product-details h3 {
    margin-top: 0;
    font-size: 1.1rem;
    color: #444;
  }
  
  .product-price-container {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .product-current-price {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2f3542;
  }
  
  .product-original-price {
    text-decoration: line-through;
    color: #999;
  }
  
  .product-discount-badge {
    background: #ff4757;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
  }
  
  .product-stock {
    margin-bottom: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  .product-modal-actions {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
  }
  
  .add-to-cart-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background-color: var(--main-color);
    color: white;
    border: none;
    border-radius: 5px;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .add-to-cart-btn svg {
    fill: white;
  }
  
  .add-to-cart-btn:hover {
    background-color: var(--main-focus);
  }
  
  /* Responsive para modal en dispositivos móviles */
  @media (max-width: 768px) {
    .product-modal-body {
      grid-template-columns: 1fr;
    }
    
    .product-modal-image {
      padding-top: 70%;
    }
  }

  .card-btn svg {
    width: 100%;
    height: 100%;
    fill: var(--main-color);
    transition: all 0.3s;
  }

  .card-img:hover {
    transform: translateY(-3px);
  }

  .card-btn:hover {
    border: 2px solid var(--main-focus);
  }

  .card-btn:hover svg {
    fill: var(--main-focus);
  }

  .card-btn:active {
    transform: translateY(3px);
  }
</style>
</style>
