---
export interface Props {
  brands: {
    name: string;
    logo: string;
  }[];
}

const { brands } = Astro.props;
---

<div class="brands-grid-container">
  <div class="brands-slider">
    <div class="brands-track">
      {
        [...brands, ...brands].map((brand) => (
          <div class="brand-item">
            <div class="brand-image-wrapper">
              <img src={brand.logo} alt={brand.name} loading="lazy" />
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<style>
  .brands-grid-container {
    width: 100%;
    position: relative;
    padding: 4rem 0;
    margin: 0;
    background: transparent;
    overflow: hidden;
  }

  .brands-slider {
    position: relative;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    overflow: hidden;
  }

  .brands-track {
    display: flex;
    gap: 3rem;
    animation: scroll 30s linear infinite;
    width: fit-content;
  }

  @keyframes scroll {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(-50%);
    }
  }

  .brand-item {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    flex-shrink: 0;
  }

  /* Eliminado efecto hover */

  .brand-image-wrapper {
    width: 180px;
    height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    background: transparent;
    border: none;
  }

  /* Eliminado efecto hover */

  .brand-item img {
    max-width: 100%;
    max-height: 100%;
    width: auto;
    height: auto;
    object-fit: contain;
    /* Sin filtro grayscale para mostrar a color */
  }

  /* Eliminado efecto hover */

  /* Responsive Design */
@media (max-width: 768px) {
    .brand-image-wrapper {
      width: 140px;
      height: 100px;
      padding: 0.75rem;
    }
}


  @media (max-width: 480px) {
    .brand-image-wrapper {
      width: 120px;
      height: 80px;
      padding: 0.5rem;
    }

    .brands-grid-container {
      padding: 2rem 0;
    }

    .brands-track {
      gap: 2rem;
    }
  }

  /* Desplazamiento continuo sin pausa */
</style>
