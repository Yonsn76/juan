---
import Layout from '../../../layouts/Layout.astro';
import '../../../styles/admin.css';
import { supabase } from '../../../lib/supabase';

// Lista de iconos disponibles de Font Awesome
const availableIcons = [
  'motorcycle', 'hard-hat', 'tshirt', 'cogs', 'tools', 'gift',
  'shield-alt', 'bolt', 'oil-can', 'wrench', 'cog', 'helmet-safety',
  'screwdriver', 'car-battery', 'gas-pump', 'key', 'map-marker-alt',
  'road', 'tachometer-alt', 'truck', 'user-shield', 'shopping-cart'
];

// Obtener el ID de la categor칤a de la URL
const categoryIdParam = Astro.url.searchParams.get('id');
// Convertir a n칰mero si es posible
const categoryId = categoryIdParam ? parseInt(categoryIdParam) : null;
console.log('游댌 DEBUG - ID de la categor칤a a editar (original):', categoryIdParam);
console.log('游댌 DEBUG - ID de la categor칤a a editar (convertido):', categoryId);
console.log('游댌 DEBUG - Tipo de ID:', typeof categoryId);
console.log('游댌 DEBUG - URL completa:', Astro.url.toString());

// Variables para almacenar los datos de la categor칤a
let category: any = null;
let error: string | null = null;

// Obtener datos de Supabase
if (!categoryIdParam) {
  error = 'No se ha proporcionado un ID de categor칤a. Por favor, selecciona una categor칤a para editar.';
  console.error('Error: No se ha proporcionado un ID de categor칤a');
} else if (!categoryId) {
  error = `ID de categor칤a inv치lido: "${categoryIdParam}". El ID debe ser un n칰mero.`;
  console.error(`Error: ID de categor칤a inv치lido: "${categoryIdParam}"`);
} else {
  try {
    // Obtener la categor칤a por ID
    console.log(`游댌 DEBUG - Consultando Supabase con ID de categor칤a: ${categoryId}`);
    const { data: categoryData, error: categoryError } = await supabase
      .from('categories')
      .select('*')
      .eq('id', categoryId)
      .single();

    console.log('游댌 DEBUG - Resultado de la consulta:', {
      categoryData: categoryData ? JSON.stringify(categoryData) : null,
      categoryError
    });

    if (categoryError) {
      console.error('Error al obtener la categor칤a:', categoryError);
      error = categoryError.message || 'Error al obtener la categor칤a';
    } else if (!categoryData) {
      console.error(`No se encontraron datos para la categor칤a con ID ${categoryId}`);
      error = `No se encontraron datos para la categor칤a con ID ${categoryId}`;
    } else {
      console.log('Categor칤a encontrada:', categoryData);
      category = categoryData;
    }
  } catch (err) {
    console.error('Error al obtener datos de Supabase:', err);
    error = err.message || 'Error al obtener datos';
  }
}

// Manejar el env칤o del formulario
if (Astro.request.method === 'POST') {
  try {
    // Obtener los datos del cuerpo de la solicitud
    const formData = await Astro.request.text();
    console.log('Datos del formulario (raw):', formData);

    // Parsear los datos del formulario
    const params = new URLSearchParams(formData);

    // Imprimir los par치metros para depuraci칩n
    console.log('Par치metros del formulario:');
    for (const [key, value] of params.entries()) {
      console.log(`${key}: ${value}`);
    }

    // Actualizar solo la fecha de actualizaci칩n
    const now = new Date().toISOString();

    const categoryData = {
      name: params.get('name') || '',
      description: params.get('description') || '',
      icon: params.get('icon') || 'tag',
      updated_at: now
    };

    console.log('Datos de categor칤a a actualizar:', categoryData);

    // Validar que el nombre no est칠 vac칤o
    if (!categoryData.name || categoryData.name.trim() === '') {
      error = 'El nombre de la categor칤a es obligatorio';
      console.log('Error de validaci칩n: Nombre vac칤o');
    } else {
      // Actualizar la categor칤a en Supabase
      const { data: updatedData, error: updateError } = await supabase
        .from('categories')
        .update(categoryData)
        .eq('id', categoryId)
        .select();

      if (updateError) {
        console.error('Error al actualizar la categor칤a:', updateError);
        error = updateError.message || 'Error al actualizar la categor칤a';
      } else {
        console.log('Categor칤a actualizada correctamente:', updatedData);
        // Redirigir a la lista de categor칤as
        return Astro.redirect('/admin/categories');
      }
    }

    // El c칩digo de manejo de errores ya est치 en el bloque else anterior
  } catch (err) {
    console.error('Error al procesar el formulario:', err);
    error = err.message || 'Error al procesar el formulario';
  }
}

console.log('Estado final:', { category, error, method: Astro.request.method });
---

<Layout title="Editar Categor칤a - Casa Biker">
  <div class="admin-container">
    <header class="admin-header">
      <div class="admin-header-content">
        <h1>Editar Categor칤a</h1>
        <div class="admin-user-info">
          <span class="admin-username">Admin</span>
          <button id="logout-btn" class="admin-logout-btn">
            <i class="fas fa-sign-out-alt"></i> Cerrar sesi칩n
          </button>
        </div>
      </div>
    </header>

    <div class="admin-content">
      <aside class="admin-sidebar">
        <nav class="admin-nav">
          <ul>
            <li class="admin-nav-item">
              <a href="/admin" class="admin-nav-link">
                <i class="fas fa-tachometer-alt"></i>
                <span>Dashboard</span>
              </a>
            </li>
            <li class="admin-nav-item">
              <a href="/admin/products" class="admin-nav-link">
                <i class="fas fa-box"></i>
                <span>Productos</span>
              </a>
            </li>
            <li class="admin-nav-item active">
              <a href="/admin/categories" class="admin-nav-link">
                <i class="fas fa-tags"></i>
                <span>Categor칤as</span>
              </a>
            </li>
            <li class="admin-nav-item">
              <a href="/admin/settings" class="admin-nav-link">
                <i class="fas fa-cog"></i>
                <span>Configuraci칩n</span>
              </a>
            </li>
          </ul>
        </nav>
      </aside>

      <main class="admin-main">
        <div class="admin-content-header">
          <h2>Editar Categor칤a: {category?.name}</h2>
          <a href="/admin/categories" class="admin-btn admin-btn-secondary">
            <i class="fas fa-arrow-left"></i> Volver a la lista
          </a>
        </div>

        <div id="error-message" class="admin-alert admin-alert-danger" style="display: none;">
          <i class="fas fa-exclamation-circle"></i>
          <span id="error-text"></span>
        </div>

        <div id="success-message" class="admin-alert admin-alert-success" style="display: none;">
          <i class="fas fa-check-circle"></i>
          <span>Categor칤a actualizada correctamente. Redirigiendo...</span>
        </div>

        {error && (
          <div class="admin-alert admin-alert-danger">
            <i class="fas fa-exclamation-circle"></i>
            <span>Error: {error}</span>
          </div>
        )}

        {!category && !error && (
          <div class="admin-alert admin-alert-info">
            <i class="fas fa-spinner fa-spin"></i>
            <span>Cargando datos de la categor칤a...</span>
          </div>
        )}

        {category ? (
          <form id="category-form" class="admin-form" action={`/admin/categories/edit?id=${category.id}`} method="POST">
            <!-- ID de la categor칤a (solo lectura) -->
            <div class="admin-form-group">
              <label for="category-id" class="admin-form-label">ID de la Categor칤a</label>
              <input
                type="text"
                id="category-id"
                name="id"
                class="admin-form-input"
                value={category.id}
                readonly
              >
              <small class="admin-form-help">El ID no se puede modificar</small>
            </div>

            <div class="admin-form-group">
              <label for="category-name" class="admin-form-label">Nombre de la Categor칤a</label>
              <input
                type="text"
                id="category-name"
                name="name"
                class="admin-form-input"
                value={category.name}
                required
              >
            </div>

            <div class="admin-form-group">
              <label for="category-description" class="admin-form-label">Descripci칩n</label>
              <textarea
                id="category-description"
                name="description"
                class="admin-form-textarea"
                rows="3"
              >{category.description}</textarea>
              <small class="admin-form-help">Descripci칩n breve de la categor칤a</small>
            </div>

            <div class="admin-form-group">
              <label class="admin-form-label">Icono</label>
              <div class="admin-icon-selector">
                <input type="hidden" id="selected-icon" name="icon" value={category.icon}>
                <div class="admin-icon-grid">
                  {availableIcons.map(icon => (
                    <div
                      class={`admin-icon-option ${icon === category.icon ? 'selected' : ''}`}
                      data-icon={icon}
                    >
                      <i class={`fas fa-${icon}`}></i>
                    </div>
                  ))}
                </div>
              </div>
              <small class="admin-form-help">Selecciona un icono para representar la categor칤a</small>
            </div>

            {/* Mostrar informaci칩n de fechas */}
            <div class="admin-form-group">
              <label class="admin-form-label">Informaci칩n adicional</label>
              <div class="admin-info-box">
                <p><strong>Creado:</strong> {new Date(category.created_at).toLocaleString()}</p>
                <p><strong>칔ltima actualizaci칩n:</strong> {new Date(category.updated_at).toLocaleString()}</p>
              </div>
            </div>

            <div class="admin-form-actions">
              <a href="/admin/categories" class="admin-btn admin-btn-secondary" id="cancel-btn">
                <i class="fas fa-times"></i> Cancelar
              </a>
              <button type="submit" class="admin-btn admin-btn-primary" id="save-btn">
                <i class="fas fa-save"></i> Actualizar Categor칤a
              </button>
            </div>
          </form>
        ) : (
          !error && (
            <div class="admin-empty-state">
              <i class="fas fa-exclamation-triangle"></i>
              <h3>Categor칤a no encontrada</h3>
              <p>La categor칤a que intentas editar no existe o ha sido eliminada.</p>
              <a href="/admin/categories" class="admin-btn admin-btn-primary">
                <i class="fas fa-arrow-left"></i> Volver a la lista de categor칤as
              </a>
            </div>
          )
        )}
      </main>
    </div>
  </div>
</Layout>

<script>
  import { createClient } from '@supabase/supabase-js';

  // Crear cliente de Supabase
  const supabaseUrl = 'https://cnrhqbbquymnlquuwkbh.supabase.co';
  const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNucmhxYmJxdXltbmxxdXV3a2JoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5NDYwNDksImV4cCI6MjA2MzUyMjA0OX0.uWq6EPQrMOq1vBif4flJVnjHhvKjIlbB-nrnxgRzCbY';
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  document.addEventListener('DOMContentLoaded', () => {
    const categoryForm = document.getElementById('category-form') as HTMLFormElement;
    const saveBtn = document.getElementById('save-btn') as HTMLButtonElement;
    const iconOptions = document.querySelectorAll('.admin-icon-option');
    const selectedIconInput = document.getElementById('selected-icon') as HTMLInputElement;

    // Manejar la selecci칩n de iconos
    iconOptions.forEach(option => {
      option.addEventListener('click', () => {
        // Quitar la clase seleccionada de todas las opciones
        iconOptions.forEach(opt => opt.classList.remove('selected'));

        // A침adir la clase seleccionada a la opci칩n actual
        option.classList.add('selected');

        // Actualizar el valor del input oculto
        const iconName = option.getAttribute('data-icon') || 'tag';
        if (selectedIconInput) {
          selectedIconInput.value = iconName;
        }
      });
    });

    // Manejar el env칤o del formulario
    if (categoryForm) {
      categoryForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        try {
          // Mostrar indicador de carga
          if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Actualizando...';
          }

          // Recopilar datos del formulario
          const formData = new FormData(categoryForm);
          const categoryData = Object.fromEntries(formData.entries());

          console.log('Datos del formulario:', categoryData);

          // Obtener la fecha y hora actual
          const now = new Date().toISOString();

          // Actualizar solo la fecha de actualizaci칩n
          categoryData.updated_at = now;

          // Validar que el nombre no est칠 vac칤o
          const name = categoryData.name?.toString() || '';
          if (!name || name.trim() === '') {
            throw new Error('El nombre de la categor칤a es obligatorio');
          }

          console.log('Datos de categor칤a a actualizar:', categoryData);

          // Actualizar la categor칤a en Supabase
          const { data, error } = await supabase
            .from('categories')
            .update(categoryData)
            .eq('id', categoryData.id)
            .select();

          if (error) throw error;

          console.log('Categor칤a actualizada correctamente:', data);

          // Mostrar mensaje de 칠xito
          const successMessage = document.getElementById('success-message');
          if (successMessage) {
            successMessage.style.display = 'flex';
          }

          // Redirigir a la lista de categor칤as despu칠s de 1 segundo
          setTimeout(() => {
            window.location.href = '/admin/categories';
          }, 1000);
        } catch (error) {
          console.error('Error al actualizar la categor칤a:', error);

          // Mostrar mensaje de error
          const errorMessage = document.getElementById('error-message');
          const errorText = document.getElementById('error-text');
          if (errorMessage && errorText) {
            errorText.textContent = 'Error al actualizar la categor칤a: ' + error.message;
            errorMessage.style.display = 'flex';

            // Ocultar el mensaje despu칠s de 5 segundos
            setTimeout(() => {
              errorMessage.style.display = 'none';
            }, 5000);
          }

          // Restaurar el bot칩n de guardar
          if (saveBtn) {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Actualizar Categor칤a';
          }
        }
      });
    }
  });
</script>

<style>
  .admin-icon-selector {
    margin-bottom: 1rem;
  }

  .admin-icon-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
    gap: 0.5rem;
    margin-top: 0.5rem;
  }

  .admin-icon-option {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .admin-icon-option i {
    font-size: 1.25rem;
    color: #4b5563;
  }

  .admin-icon-option:hover {
    background-color: #f3f4f6;
  }

  .admin-icon-option.selected {
    background-color: #e63946;
    border-color: #e63946;
  }

  .admin-icon-option.selected i {
    color: white;
  }

  .admin-info-box {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 0.375rem;
    padding: 1rem;
    margin-bottom: 1rem;
  }

  .admin-info-box p {
    margin: 0.5rem 0;
    color: #6c757d;
    font-size: 0.875rem;
  }

  .admin-info-box strong {
    color: #495057;
  }
</style>
