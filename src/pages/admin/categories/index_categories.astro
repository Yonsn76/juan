---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { supabase } from '../../../lib/supabase';

// Obtener el usuario de locals (establecido por el middleware)
const user = Astro.locals.user;

interface Category {
  id: number;
  name: string;
  description?: string;
  icon?: string;
  created_at?: string;
  updated_at?: string;
  productCount?: number;
}

// Obtener categorías de Supabase
let categories: Category[] = [];
let error: string | null = null;

try {
  console.log('Obteniendo categorías de Supabase...');
  const { data: categoriesData, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .order('name');

  if (categoriesError) {
    console.error('Error al obtener categorías:', categoriesError);
    error = categoriesError.message;
  } else {
    categories = categoriesData || [];
    console.log(`Obtenidas ${categories.length} categorías de Supabase`);
  console.log('Datos de categorías:', JSON.stringify(categories, null, 2));
  }

  // Obtener conteo de productos por categoría
  const { data: productsData, error: productsError } = await supabase
    .from('products')
    .select('category_id');

  if (productsError) {
    console.error('Error al obtener productos:', productsError);
  } else {
    // Contar productos por categoría
    const productCounts: Record<number, number> = {};
    productsData.forEach(product => {
      const categoryId = product.category_id as number;
      if (categoryId !== undefined && categoryId !== null) {
        productCounts[categoryId] = (productCounts[categoryId] || 0) + 1;
      }
    });

    // Añadir el conteo a cada categoría
    categories = categories.map(category => ({
      ...category,
      productCount: productCounts[category.id] || 0
    }));
  }
} catch (err: unknown) {
  console.error('Error al obtener datos:', err);
  error = err instanceof Error ? err.message : 'Error desconocido';
}
---

<AdminLayout title="Administrar Categorías" user={user}>
  <div class="admin-content-header">
    <h2>Lista de Categorías</h2>
    <a href="/admin/categories/new_categories" class="admin-btn admin-btn-primary">
      <i class="fas fa-plus"></i> Nueva Categoría
    </a>
  </div>

  {error && (
    <div class="admin-alert admin-alert-danger">
      <i class="fas fa-exclamation-circle"></i>
      <span>Error: {error}</span>
    </div>
  )}

  {categories.length === 0 && !error ? (
    <div class="admin-empty-state">
      <i class="fas fa-tags"></i>
      <h3>No hay categorías</h3>
      <p>Aún no has creado ninguna categoría. Haz clic en "Nueva Categoría" para comenzar.</p>
    </div>
  ) : (
    <div class="admin-table-container">
      <table class="admin-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Icono</th>
            <th>Nombre</th>
            <th>Descripción</th>
            <th>Productos</th>
            <th>Creado</th>
            <th>Actualizado</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody id="categories-table-body">
          {categories.map((category) => (
            <tr data-id={category.id}>
              <td>#{category.id}</td>
              <td>
                <div class="admin-category-icon">
                  <i class={`fas fa-${category.icon || 'tag'}`}></i>
                </div>
              </td>
              <td>{category.name}</td>
              <td>{category.description || ''}</td>
              <td>
                <span class="admin-badge admin-badge-info">
                  {category.productCount || 0}
                </span>
              </td>
              <td class="admin-date-cell">
                {category.created_at ? new Date(category.created_at).toLocaleDateString() : '-'}
              </td>
              <td class="admin-date-cell">
                {category.updated_at ? new Date(category.updated_at).toLocaleDateString() : '-'}
              </td>
              <td>
                <div class="admin-actions">
                  <a href={`/admin/categories/edit_categories?id=${category.id}`} class="admin-btn admin-btn-icon admin-btn-edit" title={`Editar categoría: ${category.name} (ID: ${category.id})`}>
                    <i class="fas fa-edit"></i>
                  </a>
                  <button
                    class="admin-btn admin-btn-icon admin-btn-delete"
                    data-id={category.id}
                    disabled={category.productCount !== undefined && category.productCount > 0}
                    title={category.productCount !== undefined && category.productCount > 0 ? "No se puede eliminar una categoría con productos" : "Eliminar categoría"}
                  >
                    <i class="fas fa-trash"></i>
                  </button>
                </div>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )}
</AdminLayout>

<script>
  import { supabase } from '../../../lib/supabase';

  document.addEventListener('DOMContentLoaded', () => {
    // Los botones de edición ahora son enlaces directos

    // Botones de eliminación
    document.querySelectorAll('.admin-btn-delete').forEach(button => {
      button.addEventListener('click', async () => {
        // Verificar si el botón está deshabilitado
        if (button.hasAttribute('disabled')) {
          alert('No se puede eliminar una categoría que contiene productos. Primero debes mover o eliminar los productos de esta categoría.');
          return;
        }

        const categoryId = button.getAttribute('data-id');
        if (confirm('¿Estás seguro de que deseas eliminar esta categoría? Esta acción no se puede deshacer.')) {
          try {
            console.log(`Eliminando categoría ${categoryId}...`);

            // Eliminar la categoría de Supabase
            const { error } = await supabase
              .from('categories')
              .delete()
              .eq('id', categoryId);

            if (error) {
              throw error;
            }

            console.log(`Categoría ${categoryId} eliminada correctamente`);

            // Ocultar la fila en la tabla
            const row = button.closest('tr');
            if (row) {
              row.style.display = 'none';
            }

            // Mostrar mensaje de éxito
            alert('Categoría eliminada correctamente');
          } catch (error) {
            console.error('Error al eliminar categoría:', error);
            alert('Error al eliminar la categoría. Inténtalo de nuevo.');
          }
        }
      });
    });

    // Resaltar el elemento del menú activo
    const navItems = document.querySelectorAll('.admin-nav-item');
    navItems.forEach(item => {
      if (item.getAttribute('data-page') === 'categories') {
        item.classList.add('active');
      }
    });
  });
</script>

<style>
  .admin-date-cell {
    font-size: 0.875rem;
    color: #6c757d;
    white-space: nowrap;
  }
</style>
