---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { supabase } from '../../../lib/supabase';

// Obtener el usuario de locals (establecido por el middleware)
const user = Astro.locals.user;

interface Product {
  id: number;
  name: string;
  description?: string;
  price: number;
  image?: string;
  category_id?: number;
  category_name?: string;
  imageUrl?: string;
  featured: boolean;
  created_at?: string;
  updated_at?: string;
}

// Obtener productos y categorías desde Supabase
let products: Product[] = [];
let categories: any[] = [];
let error: string | null = null;

try {
  // Obtener categorías
  const { data: categoriesData, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .order('name');

  if (categoriesError) {
    console.error('Error al obtener categorías:', categoriesError);
    throw categoriesError;
  }

  categories = categoriesData || [];
  console.log(`Obtenidas ${categories.length} categorías de Supabase`);

  // Obtener productos con sus categorías
  const { data: productsData, error: productsError } = await supabase
    .from('products')
    .select(`
      *,
      categories:category_id (name)
    `)
    .order('name');

  if (productsError) {
    console.error('Error al obtener productos:', productsError);
    throw productsError;
  }

  // Transformar los datos al formato esperado
  products = (productsData || []).map(product => {
    // Obtener la URL de la imagen desde Supabase si existe
    let imageUrl = '/images/placeholder.jpg';

    if (product.image && !product.image.startsWith('http')) {
      try {
        const { data } = supabase.storage
          .from('productos')
          .getPublicUrl(product.image);

        if (data && data.publicUrl) {
          imageUrl = data.publicUrl;
        }
      } catch (imageError) {
        console.error('Error al obtener URL de imagen:', imageError);
      }
    }

    return {
      ...product,
      category_name: product.categories?.name || 'Sin categoría',
      imageUrl: imageUrl
    };
  });

  console.log(`Obtenidos ${products.length} productos de Supabase`);
} catch (err: unknown) {
  console.error('Error al obtener datos de Supabase:', err);
  error = err instanceof Error ? err.message : 'Error al cargar datos';

  // Inicializar con arrays vacíos en caso de error
  products = [];
  categories = [];
}
---

<AdminLayout title="Administrar Productos" user={user}>
  <div class="admin-content-header">
    <h2>Lista de Productos</h2>
    <a href="/admin/products/new_products" class="admin-btn admin-btn-primary">
      <i class="fas fa-plus"></i> Nuevo Producto
    </a>
  </div>

  {error && (
    <div class="admin-alert admin-alert-danger">
      <i class="fas fa-exclamation-circle"></i>
      <span>Error: {error}</span>
    </div>
  )}

  {products.length === 0 && !error ? (
    <div class="admin-empty-state">
      <i class="fas fa-box"></i>
      <h3>No hay productos</h3>
      <p>Aún no has creado ningún producto. Haz clic en "Nuevo Producto" para comenzar.</p>
    </div>
  ) : (
    <>
      <div class="admin-search-controls">
        <div class="admin-search-input-group">
          <input
            type="text"
            id="product-search"
            placeholder="Buscar productos..."
            class="admin-form-input"
          />
          <button class="admin-btn admin-btn-primary">
            <i class="fas fa-search"></i>
          </button>
        </div>
        
        <select id="category-filter" class="admin-form-select">
          <option value="">Todas las categorías</option>
          {categories.map((category) => (
            <option value={category.id}>{category.name}</option>
          ))}
        </select>
      </div>

      <div class="admin-table-container">
        <table class="admin-table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Imagen</th>
              <th>Nombre</th>
              <th>Categoría</th>
              <th>Precio</th>
              <th>Destacado</th>
              <th>Creado</th>
              <th>Actualizado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody id="products-table-body">
            {products.map((product) => (
              <tr data-id={product.id} data-category={product.category_id}>
                <td>#{product.id}</td>
                <td>
                  <div class="admin-product-image">
                    <img
                      src={product.imageUrl || '/images/placeholder.jpg'}
                      alt={product.name}
                      onerror="this.onerror=null; this.src='/images/placeholder.jpg';"
                    />
                  </div>
                </td>
                <td>{product.name}</td>
                <td>{product.category_name}</td>
                <td>S/ {product.price.toFixed(2)}</td>
                <td>
                  <span class={`admin-badge ${product.featured ? 'admin-badge-success' : 'admin-badge-secondary'}`}>
                    {product.featured ? 'Sí' : 'No'}
                  </span>
                </td>
                <td class="admin-date-cell">
                  {product.created_at ? new Date(product.created_at).toLocaleDateString() : '-'}
                </td>
                <td class="admin-date-cell">
                  {product.updated_at ? new Date(product.updated_at).toLocaleDateString() : '-'}
                </td>
                <td>
                  <div class="admin-actions" style="display: flex; gap: 8px;">
                    <a 
                      href={`/admin/products/edit_products?id=${product.id}`} 
                      class="admin-btn admin-btn-edit" 
                      title={`Editar producto: ${product.name}`}
                      style="
                        display: inline-flex;
                        align-items: center;
                        gap: 6px;
                        padding: 6px 12px;
                        background-color: #3b82f6;
                        color: white;
                        border-radius: 4px;
                        text-decoration: none;
                        transition: background-color 0.2s;
                      "
                      onmouseover="this.style.backgroundColor='#2563eb'"
                      onmouseout="this.style.backgroundColor='#3b82f6'"
                    >
                      <i class="fas fa-pencil-alt" style="font-size: 0.9em;"></i>
                      <span>Editar</span>
                    </a>
                    <button 
                      class="admin-btn admin-btn-delete" 
                      data-id={product.id} 
                      title="Eliminar producto"
                      style="
                        display: inline-flex;
                        align-items: center;
                        gap: 6px;
                        padding: 6px 12px;
                        background-color: #ef4444;
                        color: white;
                        border: none;
                        border-radius: 4px;
                        cursor: pointer;
                        transition: background-color 0.2s;
                      "
                      onmouseover="this.style.backgroundColor='#dc2626'"
                      onmouseout="this.style.backgroundColor='#ef4444'"
                    >
                      <i class="fas fa-trash" style="font-size: 0.9em;"></i>
                      <span>Eliminar</span>
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </>
  )}
</AdminLayout>

<script>
  import { supabase } from '../../../lib/supabase';

  document.addEventListener('DOMContentLoaded', () => {
    // Funcionalidad de búsqueda
    const searchInput = document.getElementById('product-search') as HTMLInputElement;
    const categoryFilter = document.getElementById('category-filter') as HTMLSelectElement;
    const tableRows = document.querySelectorAll('#products-table-body tr');

    const filterProducts = () => {
      const searchTerm = searchInput.value.toLowerCase();
      const categoryValue = categoryFilter.value;

      tableRows.forEach(row => {
        const productName = row.children[2].textContent?.toLowerCase() || '';
        const categoryId = row.getAttribute('data-category') || row.getAttribute('data-id')?.split('-')[0] || '';

        const matchesSearch = productName.includes(searchTerm);
        const matchesCategory = !categoryValue || categoryId === categoryValue;

        if (matchesSearch && matchesCategory) {
          (row as HTMLElement).style.display = '';
        } else {
          (row as HTMLElement).style.display = 'none';
        }
      });
    };

    if (searchInput) searchInput.addEventListener('input', filterProducts);
    if (categoryFilter) categoryFilter.addEventListener('change', filterProducts);

    // Botones de eliminación
    document.querySelectorAll('.admin-btn-delete').forEach(button => {
      button.addEventListener('click', async () => {
        const productId = button.getAttribute('data-id');
        if (confirm('¿Estás seguro de que deseas eliminar este producto? Esta acción no se puede deshacer.')) {
          try {
            console.log(`Eliminando producto ${productId}...`);

            // Eliminar el producto de Supabase
            const { error } = await supabase
              .from('products')
              .delete()
              .eq('id', productId);

            if (error) {
              throw error;
            }

            console.log(`Producto ${productId} eliminado correctamente`);

            // Ocultar la fila en la tabla
            const row = button.closest('tr');
            if (row) {
              (row as HTMLElement).style.display = 'none';
            }

            // Mostrar mensaje de éxito
            alert('Producto eliminado correctamente');
          } catch (error: unknown) {
            console.error('Error al eliminar producto:', error);
            alert('Error al eliminar el producto. Inténtalo de nuevo.');
          }
        }
      });
    });

    // Resaltar el elemento del menú activo
    const navItems = document.querySelectorAll('.admin-nav-item');
    navItems.forEach(item => {
      if (item.getAttribute('data-page') === 'products') {
        item.classList.add('active');
      }
    });
  });
</script>
<style>
  .admin-date-cell {
    font-size: 0.875rem;
    color: #6c757d;
    white-space: nowrap;
  }

  .admin-product-image {
    width: 50px;
    height: 50px;
    overflow: hidden;
    border-radius: 0.375rem;
  }

  .admin-product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
</style>
