---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { supabase } from '../../../lib/supabase';

// Obtener el usuario de locals (establecido por el middleware)
const user = Astro.locals.user;

// Obtener el ID del producto de la URL
const productId = Astro.url.searchParams.get('id');
console.log('üîç DEBUG - ID del producto a editar:', productId);
console.log('üîç DEBUG - Tipo de ID:', typeof productId);
console.log('üîç DEBUG - URL completa:', Astro.url.toString());

// Decodificar el ID en caso de que est√© codificado
const decodedId = productId ? decodeURIComponent(productId) : null;
console.log('ID decodificado:', decodedId);

// Convertir a n√∫mero si es posible (ya que los IDs en Supabase parecen ser num√©ricos)
const numericId = decodedId && !isNaN(Number(decodedId)) ? Number(decodedId) : decodedId;
console.log('ID num√©rico (si aplica):', numericId, 'Tipo:', typeof numericId);

// Variables para almacenar los datos del producto y las categor√≠as
let product = null;
let categoryKey = '';
let categories = [];
let error = null;

// Obtener datos de Supabase
if (productId) {
  try {
    console.log(`Iniciando b√∫squeda de producto con ID: ${productId}`);

    // Obtener categor√≠as
    const { data: categoriesData, error: categoriesError } = await supabase
      .from('categories')
      .select('*')
      .order('name');

    if (categoriesError) {
      console.error('Error al obtener categor√≠as:', categoriesError);
      throw categoriesError;
    }

    categories = categoriesData || [];
    console.log(`Obtenidas ${categories.length} categor√≠as`);

    // Obtener el producto por ID
    console.log(`Buscando producto con ID: ${productId}`);

    // Obtener el producto por ID - usando el mismo m√©todo que en la lista y eliminaci√≥n
    console.log(`Consultando Supabase con ID: ${productId} (sin conversi√≥n)`);
    console.log('Usando cliente Supabase');

    // Verificar la estructura de la tabla products
    console.log('üîç DEBUG - Verificando estructura de la tabla products...');
    const { data: tableInfo, error: tableError } = await supabase
      .from('products')
      .select('*')
      .limit(1);

    if (tableError) {
      console.error('üîç DEBUG - Error al verificar la tabla products:', tableError);
    } else {
      console.log('üîç DEBUG - Estructura de la tabla products:', tableInfo);
    }

    // Intentar obtener el producto con el ID exacto
    console.log(`üîç DEBUG - Ejecutando consulta: SELECT * FROM products WHERE id = ${productId}`);
    console.log('üîç DEBUG - Tipo de ID en la consulta:', typeof productId);

    // Probar con diferentes formatos de ID
    const numericId = !isNaN(Number(productId)) ? Number(productId) : null;
    console.log('üîç DEBUG - ID convertido a n√∫mero:', numericId);

    // Intentar primero con el ID como string
    let { data: productData, error: productError } = await supabase
      .from('products')
      .select('*')
      .eq('id', productId)
      .single();

    // Si no funciona, intentar con el ID como n√∫mero
    if (productError && numericId !== null) {
      console.log('üîç DEBUG - Intentando con ID num√©rico:', numericId);
      const { data: numericData, error: numericError } = await supabase
        .from('products')
        .select('*')
        .eq('id', numericId)
        .single();

      if (!numericError && numericData) {
        console.log('üîç DEBUG - Producto encontrado con ID num√©rico:', numericData);
        productData = numericData;
        productError = null;
      } else {
        console.log('üîç DEBUG - Error con ID num√©rico:', numericError);
      }
    }

    console.log('üîç DEBUG - Resultado final de la consulta:', { productData, productError });

    // Si no se encuentra, intentar con una consulta m√°s flexible
    if (productError && productError.code === 'PGRST116') {
      console.log('üîç DEBUG - No se encontr√≥ con ID exacto, intentando consulta alternativa');

      // Obtener todos los productos y buscar por ID
      console.log('üîç DEBUG - Intentando obtener todos los productos');
      const { data: allProducts, error: allProductsError } = await supabase
        .from('products')
        .select('*');

      if (!allProductsError && allProducts && allProducts.length > 0) {
        console.log(`üîç DEBUG - Obtenidos ${allProducts.length} productos, buscando coincidencia...`);
        console.log('üîç DEBUG - Lista de IDs disponibles:', allProducts.map(p => p.id));

        // Buscar producto con ID exacto
        const foundProduct = allProducts.find(p => String(p.id) === String(productId));

        if (foundProduct) {
          console.log('üîç DEBUG - Producto encontrado en la lista completa:', foundProduct);
          productData = foundProduct;
          productError = null;
        } else {
          console.log('üîç DEBUG - No se encontr√≥ el producto en la lista completa');
        }
      } else {
        console.log('üîç DEBUG - Error al obtener todos los productos:', allProductsError);
      }
    }

    if (productError) {
      if (productError.code === 'PGRST116') {
        // Producto no encontrado
        console.error(`Producto con ID ${productId} no encontrado`);
        error = `Producto con ID ${productId} no encontrado`;
      } else {
        console.error('Error al obtener el producto:', productError);
        error = productError.message || 'Error al obtener el producto';
        throw productError;
      }
    } else if (!productData) {
      console.error(`No se encontraron datos para el producto con ID ${productId}`);
      error = `No se encontraron datos para el producto con ID ${productId}`;
    } else {
      console.log('Producto encontrado:', productData);
      product = productData;
      categoryKey = product.category_id;

      // Si el producto tiene una imagen en Supabase, obtener la URL
      if (product.image && !product.image.startsWith('http')) {
        try {
          const { data: imageData } = supabase.storage
            .from('productos')
            .getPublicUrl(product.image);

          if (imageData && imageData.publicUrl) {
            product.imageUrl = imageData.publicUrl;
            console.log('URL de imagen obtenida:', product.imageUrl);
          }
        } catch (imageError) {
          console.error('Error al obtener URL de imagen:', imageError);
        }
      }
    }
  } catch (err) {
    console.error('Error al obtener datos de Supabase:', err);
    error = err.message || 'Error al obtener datos';

    // Inicializar con arrays vac√≠os en caso de error
    categories = [];
  }
}

// Si no se encuentra el producto y es una solicitud GET, mostrar mensaje de error en la p√°gina
// en lugar de redirigir autom√°ticamente
console.log('Estado final:', { product, error, method: Astro.request.method });
---

<AdminLayout title="Editar Producto" user={user}>
        <div class="admin-content-header">
          <h2>Editar Producto: {product?.name}</h2>
          <a href="/admin/products" class="admin-btn admin-btn-secondary">
            <i class="fas fa-arrow-left"></i> Volver a la lista
          </a>
        </div>

        {error && (
          <div class="admin-alert admin-alert-danger">
            <i class="fas fa-exclamation-circle"></i>
            <p>Error al cargar el producto</p>
            <p>{error}</p>
            <a href="/admin/products" class="admin-btn admin-btn-primary mt-4">
              <i class="fas fa-arrow-left"></i> Volver a la lista de productos
            </a>
          </div>
        )}

        <div class="admin-form-container">
          {product ? (
            <form id="product-form" class="admin-form">
              <!-- El ID es autogenerado por Supabase y no se puede modificar -->
              <input type="hidden" id="product-id" name="id" value={product.id}>

              <div class="admin-form-group">
                <label for="product-name" class="admin-form-label">Nombre del Producto</label>
                <input
                  type="text"
                  id="product-name"
                  name="name"
                  class="admin-form-input"
                  value={product.name}
                  required
                >
              </div>

              <div class="admin-form-group">
                <label for="product-description" class="admin-form-label">Descripci√≥n Corta</label>
                <input
                  type="text"
                  id="product-description"
                  name="description"
                  class="admin-form-input"
                  value={product.description}
                  required
                >
                <small class="admin-form-help">Descripci√≥n corta que aparecer√° en las tarjetas de producto</small>
              </div>

              <div class="admin-form-group">
                <label for="product-details" class="admin-form-label">Detalles</label>
                <textarea
                  id="product-details"
                  name="details"
                  class="admin-form-textarea"
                  rows="5"
                >{product.details}</textarea>
                <small class="admin-form-help">Descripci√≥n completa que aparecer√° en la vista detallada</small>
              </div>

              <div class="admin-form-row">
                <div class="admin-form-group">
                  <label for="product-price" class="admin-form-label">Precio (S/)</label>
                  <input
                    type="number"
                    id="product-price"
                    name="price"
                    class="admin-form-input"
                    value={product.price}
                    step="0.01"
                    min="0"
                    required
                  >
                </div>

                <div class="admin-form-group">
                  <label for="product-discount" class="admin-form-label">Descuento (%)</label>
                  <input
                    type="number"
                    id="product-discount"
                    name="discount"
                    class="admin-form-input"
                    value={product.discount || ''}
                    min="0"
                    max="100"
                  >
                </div>

                <div class="admin-form-group">
                  <label for="product-stock" class="admin-form-label">Stock</label>
                  <input
                    type="number"
                    id="product-stock"
                    name="stock"
                    class="admin-form-input"
                    value="0"
                    min="0"
                  >
                </div>
              </div>

              <div class="admin-form-group">
                <label for="product-category" class="admin-form-label">Categor√≠a</label>
                <select id="product-category" name="category_id" class="admin-form-select" required>
                  <option value="">Seleccionar categor√≠a</option>
                  {categories.map((category) => (
                    <option value={category.id} selected={category.id === categoryKey}>{category.name}</option>
                  ))}
                </select>
              </div>

              <div class="admin-form-group">
                <label for="product-image" class="admin-form-label">Imagen</label>
                <div class="admin-form-file-input">
                  <input
                    type="file"
                    id="product-image"
                    name="image"
                    class="admin-form-file"
                    accept="image/*"
                  >
                  <label for="product-image" class="admin-form-file-label">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <span>Cambiar imagen</span>
                  </label>
                </div>
                <div id="image-preview" class="admin-image-preview">
                  {product.image && (
                    <img
                      src={product.imageUrl || `/images/${product.image}`}
                      alt={product.name}
                      class="admin-preview-img"
                      onerror="this.src='/images/placeholder.jpg'"
                    />
                  )}
                </div>
                <input type="hidden" name="current_image" value={product.image} />
                <small class="admin-form-help">Deja vac√≠o para mantener la imagen actual</small>
              </div>

              <div class="admin-form-group">
                <div class="admin-form-checkbox-group">
                  <input
                    type="checkbox"
                    id="product-featured"
                    name="featured"
                    class="admin-form-checkbox"
                    checked={product.featured}
                  >
                  <label for="product-featured" class="admin-form-checkbox-label">
                    Producto destacado
                  </label>
                </div>
                <small class="admin-form-help">Los productos destacados aparecer√°n en la p√°gina principal</small>
              </div>

              <div class="admin-form-actions">
                <button type="button" class="admin-btn admin-btn-secondary" id="cancel-btn">
                  Cancelar
                </button>
                <button type="submit" class="admin-btn admin-btn-primary" id="save-btn">
                  <i class="fas fa-save"></i> Actualizar Producto
                </button>
              </div>
            </form>
          ) : !error ? (
            <div class="admin-message">
              <i class="fas fa-exclamation-triangle"></i>
              <h3>Producto no encontrado</h3>
              <p>El producto que intentas editar no existe o ha sido eliminado.</p>
              <a href="/admin/products" class="admin-btn admin-btn-primary">
                Volver a la lista de productos
              </a>
            </div>
          ) : null}
        </div>
</AdminLayout>

<script>
  import { createClient } from '@supabase/supabase-js';

  // Crear cliente de Supabase
  const supabaseUrl = 'https://cnrhqbbquymnlquuwkbh.supabase.co';
  const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNucmhxYmJxdXltbmxxdXV3a2JoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5NDYwNDksImV4cCI6MjA2MzUyMjA0OX0.uWq6EPQrMOq1vBif4flJVnjHhvKjIlbB-nrnxgRzCbY';
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  document.addEventListener('DOMContentLoaded', () => {
    const productForm = document.getElementById('product-form');
    const cancelBtn = document.getElementById('cancel-btn');
    const imageInput = document.getElementById('product-image');
    const imagePreview = document.getElementById('image-preview');
    const saveBtn = document.getElementById('save-btn');

    // Manejar la vista previa de la imagen
    if (imageInput && imagePreview) {
      imageInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            imagePreview.innerHTML = `
              <img src="${e.target.result}" alt="Vista previa" class="admin-preview-img">
              <button type="button" class="admin-btn admin-btn-icon admin-btn-remove-image">
                <i class="fas fa-times"></i>
              </button>
            `;

            // Agregar evento para eliminar la imagen
            const removeBtn = imagePreview.querySelector('.admin-btn-remove-image');
            if (removeBtn) {
              removeBtn.addEventListener('click', () => {
                imageInput.value = '';
                // Restaurar la imagen original si existe
                const currentImage = document.querySelector('input[name="current_image"]').value;
                const productId = document.getElementById('product-id').value;

                // Obtener la URL de la imagen actual
                if (currentImage) {
                  // Verificar si la imagen es de Supabase o local
                  if (currentImage.startsWith('http')) {
                    imagePreview.innerHTML = `
                      <img src="${currentImage}" alt="Imagen actual" class="admin-preview-img">
                    `;
                  } else {
                    // Intentar obtener la URL de Supabase
                    supabase.storage
                      .from('productos')
                      .getPublicUrl(currentImage)
                      .then(({ data }) => {
                        if (data && data.publicUrl) {
                          imagePreview.innerHTML = `
                            <img src="${data.publicUrl}" alt="Imagen actual" class="admin-preview-img">
                          `;
                        } else {
                          imagePreview.innerHTML = `
                            <img src="/images/${currentImage}" alt="Imagen actual" class="admin-preview-img">
                          `;
                        }
                      })
                      .catch(() => {
                        imagePreview.innerHTML = `
                          <img src="/images/${currentImage}" alt="Imagen actual" class="admin-preview-img">
                        `;
                      });
                  }
                } else {
                  imagePreview.innerHTML = '';
                }
              });
            }
          };
          reader.readAsDataURL(file);
        }
      });
    }

    // Manejar el bot√≥n de cancelar
    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        if (confirm('¬øEst√°s seguro de que deseas cancelar? Los cambios no guardados se perder√°n.')) {
          window.location.href = '/admin/products';
        }
      });
    }

    // Manejar el env√≠o del formulario
    if (productForm) {
      productForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        try {
          // Mostrar indicador de carga
          if (saveBtn) {
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Actualizando...';
          }

          // Recopilar datos del formulario
          const formData = new FormData(productForm);
          const productData = Object.fromEntries(formData.entries());
          const productId = productData.id;

          // Convertir valores num√©ricos
          productData.price = parseFloat(productData.price);
          productData.discount = productData.discount ? parseInt(productData.discount) : null;
          productData.stock = productData.stock ? parseInt(productData.stock) : 0;
          productData.featured = !!formData.get('featured');

          // Eliminar campos que no necesitamos enviar a Supabase
          delete productData.current_image;

          // Manejar la imagen
          const imageFile = imageInput.files[0];
          if (imageFile) {
            try {
              console.log('Subiendo nueva imagen...');

              // Generar un nombre √∫nico para la imagen (sin depender del ID del producto)
              const fileExt = imageFile.name.split('.').pop();
              const fileName = `${Date.now()}_${Math.random().toString(36).substring(2, 15)}.${fileExt}`;
              const filePath = `${fileName}`;

              // Subir la imagen al bucket de Supabase
              const { data: uploadData, error: uploadError } = await supabase.storage
                .from('productos')
                .upload(filePath, imageFile, {
                  cacheControl: '3600',
                  upsert: true,
                  contentType: imageFile.type
                });

              if (uploadError) {
                console.error('Error al subir la imagen:', uploadError);
                throw uploadError;
              }

              // Obtener la URL p√∫blica de la imagen
              const { data: publicUrlData } = supabase.storage
                .from('productos')
                .getPublicUrl(filePath);

              // Guardar la ruta de la imagen en el producto
              productData.image = filePath;

              console.log('Imagen subida correctamente:', publicUrlData.publicUrl);
            } catch (uploadError) {
              console.error('Error al subir la imagen:', uploadError);
              // Si hay un error al subir la imagen, mantener la imagen actual
              productData.image = productData.current_image;
            }
          } else {
            // Si no se seleccion√≥ una nueva imagen, mantener la imagen actual
            productData.image = productData.current_image;
          }

          console.log('Datos del producto a actualizar:', productData);

          // Actualizar el producto en Supabase - usando el mismo m√©todo que en la eliminaci√≥n
          console.log('Actualizando producto con ID:', productId);
          const { data, error } = await supabase
            .from('products')
            .update(productData)
            .eq('id', productId)
            .select();

          if (error) throw error;

          console.log('Producto actualizado correctamente:', data);

          // Mostrar mensaje de √©xito
          alert('Producto actualizado correctamente');

          // Redirigir a la lista de productos
          window.location.href = '/admin/products';
        } catch (error) {
          console.error('Error al actualizar el producto:', error);
          alert('Error al actualizar el producto: ' + error.message);

          // Restaurar el bot√≥n de guardar
          if (saveBtn) {
            saveBtn.disabled = false;
            saveBtn.innerHTML = '<i class="fas fa-save"></i> Actualizar Producto';
          }
        }
      });
    }
  });
</script>
