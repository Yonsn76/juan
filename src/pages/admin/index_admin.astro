---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { supabase } from '../../lib/supabase';

// Obtener el usuario de locals (establecido por el middleware)
const user = Astro.locals.user;

// Obtener estadísticas para el dashboard
let productCount = 0;
let categoryCount = 0;
let featuredCount = 0;
let userCount = 0;

try {
  // Obtener conteo de productos
  const { count: products, error: productsError } = await supabase
    .from('products')
    .select('*', { count: 'exact', head: true });

  if (!productsError) {
    productCount = products || 0;
  }

  // Obtener conteo de categorías
  const { count: categories, error: categoriesError } = await supabase
    .from('categories')
    .select('*', { count: 'exact', head: true });

  if (!categoriesError) {
    categoryCount = categories || 0;
  }

  // Obtener conteo de productos destacados
  const { count: featured, error: featuredError } = await supabase
    .from('products')
    .select('*', { count: 'exact', head: true })
    .eq('featured', true);

  if (!featuredError) {
    featuredCount = featured || 0;
  }

  // Obtener conteo de usuarios
  const { count: users, error: usersError } = await supabase
    .from('users')
    .select('*', { count: 'exact', head: true });

  if (!usersError) {
    userCount = users || 0;
  }
} catch (error) {
  console.error('Error al obtener estadísticas:', error);
}
---

<AdminLayout title="Dashboard" user={user}>
        <div class="admin-dashboard">
          <div class="admin-dashboard-header">
            <h2>Resumen</h2>
            <p>Bienvenido al panel de administración, {user?.name || 'Admin'}</p>
          </div>

          <div class="admin-stats">
            <div class="admin-stat-card">
              <div class="admin-stat-icon">
                <i class="fas fa-box"></i>
              </div>
              <div class="admin-stat-info">
                <h3>Productos</h3>
                <p class="admin-stat-value" id="product-count">{productCount}</p>
              </div>
            </div>

            <div class="admin-stat-card">
              <div class="admin-stat-icon">
                <i class="fas fa-tags"></i>
              </div>
              <div class="admin-stat-info">
                <h3>Categorías</h3>
                <p class="admin-stat-value" id="category-count">{categoryCount}</p>
              </div>
            </div>

            <div class="admin-stat-card">
              <div class="admin-stat-icon">
                <i class="fas fa-star"></i>
              </div>
              <div class="admin-stat-info">
                <h3>Destacados</h3>
                <p class="admin-stat-value" id="featured-count">{featuredCount}</p>
              </div>
            </div>

            <div class="admin-stat-card">
              <div class="admin-stat-icon">
                <i class="fas fa-users"></i>
              </div>
              <div class="admin-stat-info">
                <h3>Usuarios</h3>
                <p class="admin-stat-value" id="user-count">{userCount}</p>
              </div>
            </div>
          </div>

          <div class="admin-quick-actions">
            <h3>Acciones rápidas</h3>
            <div class="admin-action-buttons">
              <a href="/admin/products/new" class="admin-action-btn">
                <i class="fas fa-plus"></i>
                Añadir producto
              </a>
              <a href="/admin/categories/new" class="admin-action-btn">
                <i class="fas fa-plus"></i>
                Añadir categoría
              </a>
              <a href="/admin/users" class="admin-action-btn">
                <i class="fas fa-users"></i>
                Gestionar usuarios
              </a>
              <a href="/catalog" class="admin-action-btn" target="_blank">
                <i class="fas fa-eye"></i>
                Ver catálogo
              </a>
            </div>
          </div>
        </div>
</AdminLayout>

<script>
  import { createClient } from '@supabase/supabase-js';

  // Crear cliente de Supabase
  const supabaseUrl = 'https://cnrhqbbquymnlquuwkbh.supabase.co';
  const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNucmhxYmJxdXltbmxxdXV3a2JoIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc5NDYwNDksImV4cCI6MjA2MzUyMjA0OX0.uWq6EPQrMOq1vBif4flJVnjHhvKjIlbB-nrnxgRzCbY';
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  document.addEventListener('DOMContentLoaded', async () => {
    try {
      // Actualizar estadísticas en tiempo real (opcional)
      const updateStats = async () => {
        try {
          // Obtener conteo de productos
          const { count: products, error: productsError } = await supabase
            .from('products')
            .select('*', { count: 'exact', head: true });

          if (!productsError && products !== null) {
            const productCountElement = document.getElementById('product-count');
            if (productCountElement) {
              productCountElement.textContent = products.toString();
            }
          }

          // Obtener conteo de categorías
          const { count: categories, error: categoriesError } = await supabase
            .from('categories')
            .select('*', { count: 'exact', head: true });

          if (!categoriesError && categories !== null) {
            const categoryCountElement = document.getElementById('category-count');
            if (categoryCountElement) {
              categoryCountElement.textContent = categories.toString();
            }
          }

          // Obtener conteo de productos destacados
          const { count: featured, error: featuredError } = await supabase
            .from('products')
            .select('*', { count: 'exact', head: true })
            .eq('featured', true);

          if (!featuredError && featured !== null) {
            const featuredCountElement = document.getElementById('featured-count');
            if (featuredCountElement) {
              featuredCountElement.textContent = featured.toString();
            }
          }

          // Obtener conteo de usuarios
          const { count: users, error: usersError } = await supabase
            .from('users')
            .select('*', { count: 'exact', head: true });

          if (!usersError && users !== null) {
            const userCountElement = document.getElementById('user-count');
            if (userCountElement) {
              userCountElement.textContent = users.toString();
            }
          }
        } catch (error) {
          console.error('Error al actualizar estadísticas:', error);
        }
      };

      // Actualizar estadísticas cada 30 segundos
      updateStats();
      setInterval(updateStats, 30000);
    } catch (error) {
      console.error('Error al inicializar el dashboard:', error);
    }
  });
</script>
