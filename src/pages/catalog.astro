---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NewCategoryFilter from '../components/Catalog/NewCategoryFilter.astro';
import ProductCard from '../components/Catalog/ProductCard.astro';
import ProductModal from '../components/Catalog/ProductModal.astro';
import QuickRequestForm from '../components/Catalog/QuickRequestForm.astro';
import { supabase } from '../lib/supabase';
import type { Product } from '../types/catalog';
import '../styles/catalog.css';

// Extender la interfaz Product con campos adicionales necesarios para el catálogo
interface DisplayProduct extends Product {
  categoryKey: string;
  categoryName: string;
}

const activeCategory = Astro.url.searchParams.get('category') || 'all';
let allCategories: any[] = [];
let productsByCategory: Record<string, DisplayProduct[]> = {};
let displayProducts: DisplayProduct[] = [];

try {
  // Obtener todas las categorías
  const { data: categoriesData, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .order('name');

  if (categoriesError) throw categoriesError;
  allCategories = categoriesData || [];
  
  // Inicializar el mapa de productos por categoría con todas las categorías
  allCategories.forEach(cat => {
    productsByCategory[cat.id] = [];
  });
  
  // Añadir categoría "Sin categoría" para productos sin clasificar
  productsByCategory['uncategorized'] = [];

  // Construir la consulta de productos
  let productsQuery = supabase
    .from('products')
    .select(`
      *,
      categories:category_id (id, name)
    `)
    .order('created_at', { ascending: false });

  // Aplicar filtro de categoría si no es 'all'
  if (activeCategory !== 'all') {
    productsQuery = productsQuery.eq('category_id', activeCategory);
  }

  // Ejecutar la consulta
  const { data: productsData, error: productsError } = await productsQuery;

  if (productsError) throw productsError;

  // Transformar y agrupar los productos por categoría
  (productsData || []).forEach(product => {
    // Obtener la URL de la imagen
    const imageUrl = product.image?.startsWith('http') 
      ? product.image 
      : product.image 
        ? supabase.storage.from('productos').getPublicUrl(product.image).data.publicUrl
        : '/images/placeholder-product.jpg';

    const processedProduct = {
      id: product.id,
      name: product.name,
      description: product.description || product.name,
      price: product.price,
      image: imageUrl,
      featured: product.featured,
      details: product.details || product.name,
      discount: product.discount || 0,
      category_id: product.category_id,
      categories: product.categories || { name: 'Sin categoría', id: 'uncategorized' },
      categoryName: product.categories?.name || 'Sin categoría',
      categoryKey: product.category_id || 'uncategorized'
    };
    
    // Agregar al arreglo de todos los productos
    displayProducts.push(processedProduct);
    
    // Agregar al grupo de su categoría
    const categoryId = product.category_id || 'uncategorized';
    if (productsByCategory[categoryId]) {
      productsByCategory[categoryId].push(processedProduct);
    } else {
      productsByCategory[categoryId] = [processedProduct];
    }
  });

  console.log(`Encontrados ${displayProducts.length} productos`);
  if (activeCategory !== 'all') {
    console.log(`Mostrando categoría: ${activeCategory}`);
  } else {
    console.log('Categorías cargadas:', Object.keys(productsByCategory).length);
  }
} catch (error) {
  console.error('Error al obtener datos de Supabase:', error);
  displayProducts = [];
}

---

<Layout title="Catálogo">
  <Header />
  <main class="catalog-page">
    <div class="catalog-container">
      <h1 class="catalog-title">Nuestro Catálogo</h1>
      <NewCategoryFilter activeCategory={activeCategory} categories={allCategories} />

      {displayProducts.length > 0 ? (
        <div class="catalog-sections">
          {activeCategory !== 'all' ? (
            <div class="category-section" id={activeCategory}>
              <div class="products-grid">
                {displayProducts.map((product) => (
                  <ProductCard
                    product={product}
                    categoryName={product.categoryName}
                  />
                ))}
              </div>
            </div>
          ) : (
            // Cuando se muestra "Todas las categorías"
            allCategories.map((category) => {
              const categoryProducts = productsByCategory[category.id] || [];
              if (categoryProducts.length === 0) return null;
              
              return (
                <div class="category-section" id={category.id}>
                  <h2 class="category-title">{category.name}</h2>
                  <div class="category-divider"></div>
                  <div class="products-grid">
                    {categoryProducts.map((product) => (
                      <ProductCard
                        product={product}
                        categoryName={product.categoryName}
                      />
                    ))}
                  </div>
                </div>
              );
            })
          )}
          
          {/* Mostrar productos sin categoría si hay alguno */}
          {activeCategory === 'all' && productsByCategory['uncategorized']?.length > 0 && (
            <div class="category-section" id="uncategorized">
              <h2 class="category-title">Sin categoría</h2>
              <div class="category-divider"></div>
              <div class="products-grid">
                {productsByCategory['uncategorized'].map((product) => (
                  <ProductCard
                    product={product}
                    categoryName={product.categoryName}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      ) : (
        <div class="no-products">
          <p>No se encontraron productos en esta categoría.</p>
        </div>
      )}
    </div>
  </main>

  <ProductModal />
  <QuickRequestForm />
  <Footer />
</Layout>

<style is:global>
:root {
  /* Colores base */
  --color-white: #ffffff;
  --color-gray-50: #f9fafb;
  --color-gray-100: #f3f4f6;
  --color-gray-200: #e5e7eb;
  --color-gray-300: #d1d5db;
  --color-gray-400: #9ca3af;
  --color-gray-500: #6b7280;
  --color-gray-600: #4b5563;
  --color-gray-700: #374151;
  --color-gray-800: #1f2937;
  --color-gray-900: #111827;
  
  /* Colores primarios */
  --color-primary-50: #eff6ff;
  --color-primary-100: #dbeafe;
  --color-primary-200: #bfdbfe;
  --color-primary-300: #93c5fd;
  --color-primary-400: #60a5fa;
  --color-primary-500: #3b82f6;
  --color-primary-600: #2563eb;
  --color-primary-700: #1d4ed8;
  --color-primary-800: #1e40af;
  --color-primary-900: #1e3a8a;
  
  /* Colores de estado */
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;
  --color-info: #3b82f6;
  
  /* Variables de tema */
  --text-primary: var(--color-gray-900);
  --text-secondary: var(--color-gray-600);
  --text-tertiary: var(--color-gray-400);
  --bg-primary: var(--color-white);
  --bg-secondary: var(--color-gray-50);
  --border-color: var(--color-gray-200);
  --primary-color: var(--color-primary-600);
  --primary-hover: var(--color-primary-700);
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.05), 0 2px 4px -2px rgb(0 0 0 / 0.05);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.05), 0 4px 6px -4px rgb(0 0 0 / 0.05);
  --border-radius-sm: 0.25rem;
  --border-radius-md: 0.375rem;
  --border-radius-lg: 0.5rem;
  --border-radius-xl: 0.75rem;
  --border-radius-2xl: 1rem;
  --transition-colors: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  --transition-transform: transform 0.2s ease-in-out;
  --font-sans: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
}

.catalog-page {
  background-color: var(--bg-primary);
  min-height: calc(100vh - 120px);
  padding: 2rem 0 4rem;
  font-family: var(--font-sans);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: var(--text-primary);
  line-height: 1.5;
}

.catalog-container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 2rem;
}

.catalog-title {
  font-size: 1.75rem;
  font-weight: 600;
  color: var(--text-primary);
  margin: 0 0 2.5rem;
  text-align: center;
  position: relative;
  padding-bottom: 1rem;
  letter-spacing: -0.01em;
  line-height: 1.25;
}

.catalog-title::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
  width: 60px;
  height: 2px;
  background-color: var(--primary-color);
  opacity: 0.8;
}

.no-products {
  text-align: center;
  padding: 4rem 0;
  color: var(--text-secondary);
  font-size: 1rem;
  font-weight: 400;
}

.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1.75rem;
  margin: 0;
  padding: 0.5rem 0 2rem;
}

/* Efecto sutil en hover para las tarjetas */
.products-grid > * {
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.products-grid > *:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.04);
}

@media (max-width: 1024px) {
  .products-grid {
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }
}

@media (max-width: 768px) {
  .products-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 1.25rem;
  }
}

@media (max-width: 480px) {
  .catalog-container {
    padding: 0 1.25rem;
  }
  
  .products-grid {
    grid-template-columns: 1fr;
    gap: 16px;
  }
}
</style>