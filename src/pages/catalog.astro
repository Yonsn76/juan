---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NewCategoryFilter from '../components/Catalog/NewCategoryFilter.astro';
import ProductCard from '../components/Catalog/ProductCard.astro';
import ProductModal from '../components/Catalog/ProductModal.astro';
import QuickRequestForm from '../components/Catalog/QuickRequestForm.astro';
import { supabase } from '../lib/supabase';
import { catalogData } from '../data/catalog'; // Mantenemos esto como respaldo
import type { Product } from '../types/catalog';
import '../styles/catalog.css';

type DisplayProduct = Product & {
  categoryKey: string;
  categoryName: string;
};

// Get category from URL params or default to 'all'
const category = Astro.url.searchParams.get('category') || 'all';
console.log("Selected category:", category);

// Get products based on category
let displayProducts: DisplayProduct[] = [];
let allCategories = [];

try {
  // Obtener todas las categorías de Supabase
  const { data: categoriesData, error: categoriesError } = await supabase
    .from('categories')
    .select('*')
    .order('name');

  if (categoriesError) throw categoriesError;
  allCategories = categoriesData || [];

  if (category === 'all') {
    // Para "all", obtener todos los productos con sus categorías
    const { data: productsData, error: productsError } = await supabase
      .from('products')
      .select(`
        *,
        categories:category_id (name)
      `)
      .order('name');

    if (productsError) throw productsError;

    // Transformar los datos al formato esperado por el componente ProductCard
    displayProducts = (productsData || []).map(product => ({
      id: product.id,
      name: product.name,
      description: product.description,
      price: product.price,
      image: product.image,
      featured: product.featured,
      details: product.details,
      discount: product.discount,
      categoryKey: product.category_id,
      categoryName: product.categories?.name || 'Sin categoría'
    }));
  } else {
    // Para una categoría específica, obtener solo los productos de esa categoría
    const { data: productsData, error: productsError } = await supabase
      .from('products')
      .select(`
        *,
        categories:category_id (name)
      `)
      .eq('category_id', category)
      .order('name');

    if (productsError) throw productsError;

    // Transformar los datos al formato esperado por el componente ProductCard
    displayProducts = (productsData || []).map(product => ({
      id: product.id,
      name: product.name,
      description: product.description,
      price: product.price,
      image: product.image,
      featured: product.featured,
      details: product.details,
      discount: product.discount,
      categoryKey: product.category_id,
      categoryName: product.categories?.name || 'Sin categoría'
    }));
  }

  console.log(`Found ${displayProducts.length} products in category ${category}`);
} catch (error) {
  console.error('Error al obtener datos de Supabase:', error);

  // Si hay un error, usar los datos estáticos como respaldo
  if (category === 'all') {
    // For "all", show all products from each category
    for (const [categoryKey, categoryData] of Object.entries(catalogData)) {
      const categoryProducts = categoryData.products
        .map(product => ({
          ...product,
          categoryKey,
          categoryName: categoryData.category
        }));
      displayProducts.push(...categoryProducts);
    }
  } else {
    // For specific category, show all products from that category
    const categoryExists = Object.keys(catalogData).includes(category);
    if (categoryExists) {
      const categoryData = catalogData[category];
      const categoryProducts = categoryData.products.map(product => ({
        ...product,
        categoryKey: category,
        categoryName: categoryData.category
      }));
      displayProducts.push(...categoryProducts);
    }
  }
}
---

<Layout title={`${category !== 'all' ? `${allCategories.find(c => c.id === category)?.name || catalogData[category]?.category} - ` : ''}Catálogo - Zona Biker 15`}>
  <Header slot="header" />

  <!-- Catalog Header -->
  <section class="catalog-header">
    <div class="catalog-container">
      <h1>
        {category === 'all' ? 'Catálogo de Productos' :
          <span>
            Catálogo: <span class="catalog-category-title">
              {allCategories.find(c => c.id === category)?.name || catalogData[category]?.category || 'Productos'}
            </span>
          </span>
        }
      </h1>
      <p>
        {category === 'all'
          ? 'Descubre nuestra amplia selección de productos para motociclistas: cascos, accesorios, ropa, piezas de rendimiento y mucho más.'
          : allCategories.find(c => c.id === category)?.description || catalogData[category]?.description || 'Productos seleccionados para los amantes de las motos.'}
      </p>
    </div>
  </section>

  <!-- Category Filters -->
  <NewCategoryFilter activeCategory={category} />

  <!-- Products Grid -->
  <section class="products-section">
    <div class="catalog-container">
      <div class="price-note">
        <p>Todos los precios están expresados en Soles Peruanos (S/)</p>
      </div>
      {displayProducts.length > 0 ? (
        <div class="products-grid">
          {displayProducts.map((product) => (
            <ProductCard
              product={product}
              categoryName={product.categoryName}
            />
          ))}
        </div>
      ) : (
        <div class="no-products-message">
          <i class="fas fa-search"></i>
          <h3>No se encontraron productos</h3>
          <p>No hay productos disponibles en esta categoría en este momento.</p>
          <a href="/catalog?category=all" class="btn btn-primary">Ver todos los productos</a>
        </div>
      )}
    </div>
  </section>

  <!-- Product Modal -->
  <ProductModal />

  <!-- Quick Request Form -->
  <QuickRequestForm />

  <Footer slot="footer" />
</Layout>

<script>
  // Handle product card clicks
  document.querySelectorAll('.view-product-details').forEach(button => {
    button.addEventListener('click', () => {
      const productData = (button as HTMLElement).getAttribute('data-product');
      if (productData) {
        const product = JSON.parse(productData);
        // Use type assertion since updateProductModal is added by ProductModal component
        (window as any).updateProductModal?.(product);
      }
    });
  });

  // Debug script to check category filtering
  document.addEventListener('DOMContentLoaded', () => {
    const urlParams = new URLSearchParams(window.location.search);
    const categoryParam = urlParams.get('category') || 'all';
    console.log("Current category from URL:", categoryParam);

    // Log the number of products displayed
    const productsGrid = document.querySelector('.products-grid');
    if (productsGrid) {
      const productCards = productsGrid.querySelectorAll('article.card');
      console.log(`Displaying ${productCards.length} products`);
    } else {
      console.log("No products grid found");
    }

    // Check if the category filter is working
    const activeFilter = document.querySelector('.filter-link.active');
    if (activeFilter) {
      console.log("Active filter:", activeFilter.getAttribute('data-category'));
    } else {
      console.log("No active filter found");
    }
  });
</script>

<style>
  .catalog-header {
    background-color: #1a1a1a;
    color: white;
    padding: 3rem 0;
    margin-bottom: 2rem;
    position: relative;
    overflow: hidden;
  }

  .catalog-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('/images/header-bg.jpg') center/cover no-repeat;
    opacity: 0.2;
    z-index: 0;
  }

  .catalog-container {
    position: relative;
    z-index: 1;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
  }

  .catalog-header h1 {
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: 1rem;
    text-align: center;
    position: relative;
    display: inline-block;
    margin-left: auto;
    margin-right: auto;
    width: 100%;
  }

  .catalog-header p {
    font-size: 1.1rem;
    max-width: 800px;
    margin: 0 auto;
    text-align: center;
    color: rgba(255, 255, 255, 0.9);
    line-height: 1.6;
  }

  .catalog-category-title {
    color: #e63946;
    font-weight: 700;
    position: relative;
    display: inline-block;
  }

  .catalog-category-title::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 100%;
    height: 3px;
    background-color: #e63946;
  }

  .no-products-message {
    text-align: center;
    padding: 3rem 1.5rem;
    background-color: white;
    border-radius: 8px;
    margin: 2rem auto;
    max-width: 800px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }

  .no-products-message i {
    font-size: 3.5rem;
    color: #e63946;
    margin-bottom: 1.5rem;
    display: block;
  }

  .no-products-message h3 {
    font-size: 1.75rem;
    margin-bottom: 1rem;
    color: #333;
    font-weight: 700;
  }

  .no-products-message p {
    color: #666;
    margin-bottom: 1.5rem;
    font-size: 1.1rem;
    line-height: 1.6;
  }

  .btn-primary {
    background-color: #e63946;
    color: white;
    padding: 0.75rem 1.75rem;
    border-radius: 6px;
    text-decoration: none;
    display: inline-block;
    font-weight: 600;
    transition: all 0.3s ease;
    border: none;
    font-size: 1rem;
    box-shadow: 0 4px 6px rgba(230, 57, 70, 0.2);
  }

  .btn-primary:hover {
    background-color: #c1121f;
    transform: translateY(-2px);
    box-shadow: 0 6px 8px rgba(230, 57, 70, 0.3);
  }

  @media (max-width: 768px) {
    .catalog-header {
      padding: 2.5rem 0;
    }

    .catalog-header h1 {
      font-size: 2rem;
    }

    .catalog-header p {
      font-size: 1rem;
    }

    .no-products-message {
      padding: 2.5rem 1.25rem;
    }

    .no-products-message i {
      font-size: 3rem;
    }

    .no-products-message h3 {
      font-size: 1.5rem;
    }
  }

  @media (max-width: 576px) {
    .catalog-header {
      padding: 2rem 0;
    }

    .catalog-header h1 {
      font-size: 1.75rem;
    }

    .catalog-header p {
      font-size: 0.9rem;
    }

    .no-products-message {
      padding: 2rem 1rem;
    }

    .no-products-message i {
      font-size: 2.5rem;
    }

    .no-products-message h3 {
      font-size: 1.25rem;
    }

    .btn-primary {
      padding: 0.6rem 1.5rem;
      font-size: 0.9rem;
    }
  }
</style>
